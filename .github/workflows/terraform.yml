name: "Terraform"

on:
  pull_request:
    # paths: # setup paths if necessary
    branches:
      - main
    types:
      - opened # default
      - synchronize # default
      - reopened # default
      - closed # needed to handle action after merge

env:
  TERRAFORM_VERSION: 1.3.7
  WORKING_DIR: ./terraform/demo # relative path under which your terraform codes are

jobs:
  terraform:
    name: "Terraform"
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    # Set the working directory to main for the config files
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIR }}

    steps:
      # Make sure GitHUb Actions runner is monitored (secured)
      - name: Harden Runner
        uses: step-security/harden-runner@v2.1.0
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # TODO switch to this approach
      # - id: 'auth'
      #   name: 'Authenticate to Google Cloud'
      #   uses: google-github-actions/auth@v0.7.0
      #   with:
      #     create_credentials_file: 'true'
      #     workload_identity_provider: <write what you got from terraform output>
      #     service_account: <write what you got from terrafrom output>

      # Install the preferred version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Fmt
        if: github.event.pull_request.merged != true
        id: fmt
        run: |
          terraform fmt -check

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          TF_VAR_project_id: ${{ secrets.TF_VAR_PROJECT_ID }}
        run: |
          terraform init

      - name: Terraform Validate
        if: github.event.pull_request.merged != true
        id: validate
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          TF_VAR_project_id: ${{ secrets.TF_VAR_PROJECT_ID }}
        run: |
          terraform validate -no-color

      # Run a terraform plan for pull requests only
      - name: Terraform Plan
        id: plan
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          TF_VAR_project_id: ${{ secrets.TF_VAR_PROJECT_ID }}
        run: |
          terraform plan -no-color

      # Add a comment to pull requests with plan results
      - name: add-plan-comment
        if: github.event.pull_request.merged != true
        id: comment
        uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ \`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>\n
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            </details>\n
            #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>\n
            \`\`\`\n
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            </details>\n
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.WORKING_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

        # On push to main, build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        if: github.event.pull_request.merged == true
        id: apply
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          TF_VAR_project_id: ${{ secrets.TF_VAR_PROJECT_ID }}
        run: |
          terraform apply -auto-approve -input=false -no-color

      - uses: actions/github-script@v6
        if: github.event.pull_request.merged == true
        with:
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Apply üìñ \`${{ steps.apply.outcome }}\`
            <details><summary>Show Apply</summary>\n
            \`\`\`\n
            ${{ steps.apply.outputs.stdout }}
            \`\`\`
            </details>\n
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.WORKING_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
